/****************************************************************************
  FileName     [ cirWrite.cpp ]
  PackageName  [ cir ]
  Synopsis     [ write circuit ]
  Author       [ music960633 ]
****************************************************************************/

#include <fstream>
#include <string>
#include <cassert>
#include <map>
#include <string>
#include "cirMgr.h"
#include <vector>


void CirMgr::writeAig(const std::string& filename) {
  std::ofstream ofs(filename.c_str());
  unsigned id = 0;
  unsigned numTot = topoList_.size();  // includes const0 gate
  unsigned numPi = piList_.size();
  unsigned numPo = poList_.size();
  unsigned numAig = aigList_.size();
  unsigned maxId = (maxId_ == 0 ? numTot - 1 : maxId_);
  assert(numTot = numPi + numPo + numAig + 1);
  // set gate id
  if (maxId_ == 0) {
    // set constant 0
    const0_->setId(id++);
    // set input
    for (unsigned i = 0; i < numPi; ++i)
      piList_[i]->setId(id++);
    // set AIG
    for (unsigned i = 0; i < numAig; ++i)
      aigList_[i]->setId(id++);
  }
  // write header
  ofs << "aag " << maxId << " " << numPi << " " << 0 << " "
      << numPo << " " << numAig << std::endl;
  // write PI
  for (unsigned i = 0; i < numPi; ++i)
    ofs << piList_[i]->getId()*2 << std::endl;
  // write PO
  for (unsigned i = 0; i < numPo; ++i) {
    CirGateV in0 = poList_[i]->getFanin0();
    ofs << in0.gate()->getId()*2 + (in0.isInv() ? 1 : 0) << std::endl;
  }
  // write AIG
  for (unsigned i = 0; i < numAig; ++i) {
    CirGateV in0 = aigList_[i]->getFanin0();
    CirGateV in1 = aigList_[i]->getFanin1();
    ofs << aigList_[i]->getId()*2 << " "
      << in0.gate()->getId()*2 + (in0.isInv() ? 1 : 0) << " "
      << in1.gate()->getId()*2 + (in1.isInv() ? 1 : 0) << std::endl;
  }
  // write comment
  ofs << "c" << std::endl;
  ofs << "generated by music960633" << std::endl;
  ofs.close();
}









